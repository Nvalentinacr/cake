import streamlit as st  # Import Streamlit first
import os
from transformers import BlipProcessor, BlipForConditionalGeneration, pipeline
from PIL import Image
import torch

# === Step 1: Set up Hugging Face Token ===
os.environ["HF_TOKEN"] = st.secrets["HF_TOKEN"]  # Demo token for workshop

st.title("üç∞ AI Cake Image Captioning & QA")

# === Step 2: Image Upload ===
uploaded_file = st.file_uploader("Upload an image of a cake", type=["jpg", "jpeg", "png"])
if uploaded_file:
    image = Image.open(uploaded_file).convert("RGB")
    st.image(image, caption="Uploaded Image", use_column_width=True)

    # === Step 3: Load BLIP model and generate caption ===
    with st.spinner("Generating caption..."):
        processor = BlipProcessor.from_pretrained("Salesforce/blip-image-captioning-base")
        model = BlipForConditionalGeneration.from_pretrained("Salesforce/blip-image-captioning-base")
        inputs = processor(images=image, return_tensors="pt")
        with torch.no_grad():
            output = model.generate(**inputs)
            caption = processor.decode(output[0], skip_special_tokens=True)
    st.markdown("**üìù Caption generated by BLIP model:**")
    st.write(caption)

    # === Step 4: Use QA model to extract ingredients and steps ===
    qa_pipeline = pipeline("question-answering", model="deepset/roberta-base-squad2")

    # Interactive QA buttons
    if st.button("What are the ingredients?"):
        with st.spinner("Extracting ingredients..."):
            result = qa_pipeline(question="What are the ingredients?", context=caption)
            st.markdown("**Ingredients:**")
            st.write(result['answer'])

    if st.button("What is the type of fruit?"):
        with st.spinner("Extracting fruit type..."):
            result = qa_pipeline(question="What is the type of fruit?", context=caption)
            st.markdown("**Type of Fruit:**")
            st.write(result['answer'])
else:
    st.info("Please upload an image of a cake to get started.")
